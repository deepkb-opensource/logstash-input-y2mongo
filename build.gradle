import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply from: "rubyUtils.gradle"


// ===========================================================================
// plugin info
// ===========================================================================
group                      'com.deepkb.logstash' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Y2 MongoDB Input Plugin"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
pluginInfo.authors         = ['Y2 Consulting Inc.']
pluginInfo.email           = ['info@deepkb.com']
pluginInfo.homepage        = "https://deepkb.com"
pluginInfo.pluginType      = "input"
pluginInfo.pluginClass     = "Y2Mongo"
pluginInfo.pluginName      = "y2mongo" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
    	// Pick up the right version compatible with your gradle version
    	// Check here: https://github.com/johnrengelman/shadow
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
    }
}

repositories {
    mavenCentral()
}

wrapper() {
    gradleVersion = '6.0'
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = null
}


dependencies {
    compile 'org.mongodb:mongo-java-driver:3.12.7'
    compile 'org.mongodb:bson:4.1.1'
    compile 'org.quartz-scheduler:quartz:2.3.2'
    compile 'org.apache.commons:commons-lang3:3.11'
    compile 'org.apache.logging.log4j:log4j-api:2.13.2'
    compile 'org.apache.logging.log4j:log4j-core:2.13.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.3'
    compile files('libs/logstash-core-7.9.4.jar')

    testCompile 'junit:junit:4.12'
    testCompile 'org.jruby:jruby-complete:9.2.7.0'
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task vendor(dependsOn: shadowJar) {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

task generateRubySupportFiles() {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

task removeObsoleteJars() {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

task gem(dependsOn: [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]) {
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}

task gem1(dependsOn: [removeObsoleteJars, vendor, generateRubySupportFiles]) {
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}